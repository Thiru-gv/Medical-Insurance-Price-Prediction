# -*- coding: utf-8 -*-
"""Insurance prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ErJQUmRR0H1inndSQpH7A5v7m-04TL9J
"""

!apt-get install openjdk-11-jdk
!pip install pyspark
!pip install numpy pandas matplotlib ipywidgets

import os
import sys
from pyspark.sql import SparkSession
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pyspark.ml.feature import VectorAssembler
from pyspark.ml.regression import LinearRegression
from pyspark.sql import functions as F
import ipywidgets as widgets
from IPython.display import display

# Set up Spark session
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-11-openjdk-amd64"
spark = SparkSession.builder \
    .appName("Medical Insurance Price Prediction") \
    .getOrCreate()

from google.colab import files

# Upload a CSV file
uploaded = files.upload()

# Load the data into a Spark DataFrame
data = spark.read.csv(list(uploaded.keys())[0], header=True, inferSchema=True)

# Display the DataFrame
data.show()

# Handle missing values if necessary
data = data.na.drop()

# Convert categorical variables (like 'smoker', 'sex', and 'region') to numerical values
data = data.withColumn("smoker", F.when(F.col("smoker") == "yes", 1).otherwise(0))
data = data.withColumn("sex", F.when(F.col("sex") == "male", 1).otherwise(0))  # Male=1, Female=0

# Assemble features
feature_columns = ["age", "bmi", "children", "smoker", "sex"]  # Add sex to features
assembler = VectorAssembler(inputCols=feature_columns, outputCol="features")
data = assembler.transform(data)

# Split the data into training and test sets
train_data, test_data = data.randomSplit([0.8, 0.2], seed=1234)

# Create a Linear Regression model
lr = LinearRegression(featuresCol='features', labelCol='charges')

# Fit the model
lr_model = lr.fit(train_data)

# Evaluate the model
test_results = lr_model.evaluate(test_data)

print(f"RMSE: {test_results.rootMeanSquaredError}")
print(f"R2: {test_results.r2}")

# Define input widgets
age = widgets.IntSlider(value=30, min=18, max=100, description='Age:')
bmi = widgets.FloatSlider(value=25.0, min=10.0, max=50.0, step=0.1, description='BMI:')
children = widgets.IntSlider(value=0, min=0, max=10, description='Children:')
smoker = widgets.Dropdown(options=[('Non-Smoker', 0), ('Smoker', 1)], description='Smoker:')
sex = widgets.Dropdown(options=[('Male', 1), ('Female', 0)], description='Sex:')  # Male=1, Female=0

# Create a button to trigger prediction
predict_button = widgets.Button(description='Predict Charges')

# Define the prediction function
def predict_charges(b):
    input_data = pd.DataFrame({
        'age': [age.value],
        'bmi': [bmi.value],
        'children': [children.value],
        'smoker': [smoker.value],
        'sex': [sex.value]  # Include sex in the input data
    })

    input_spark_df = spark.createDataFrame(input_data)
    input_spark_df = assembler.transform(input_spark_df)  # Transform the input DataFrame

    # Get predictions using the model
    prediction_df = lr_model.transform(input_spark_df)

    # Extract the prediction
    prediction_value = prediction_df.select("prediction").first()[0]

    print(f"Predicted Charges: {prediction_value:.2f}")

# Link the button to the prediction function
predict_button.on_click(predict_charges)

# Display the widgets
display(age, bmi, children, smoker, sex, predict_button)

